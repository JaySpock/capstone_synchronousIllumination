% datacapture is a generated class used for FPGA Data Capture. datacapture
% connects MATLAB with a FPGA and captures the FPGA internal signals via
% JTAG connection.
% 
% dco = datacapture returns a FPGA Data Capture System object generated by 
% the user. It captures internal signals from an FPGA that contains the FPGA 
% Data Capture HDL IP core, and returns the data to MATLAB over the JTAG cable. 
% 
%  Step method syntax
% [Data_out,Calibration,New_Frame]=step(dco) connects to the FPGA, and read data from the FPGA.
% 
% datacapture methods:
% step - see above description for use of this method
% release - Allow property value and input characteristics changes, and release connection to FPGA board
% clone - Create datacapture object with same property values
% isLocked - Locked status (logical)
% setTriggerCondition - Set trigger condition for each trigger signal
% setTriggerCombinationOperator - Set trigger combination operator
% setDataType - Set signal data type
% displayDataTypes - Display current data type settings
% displayTriggerCondition - Display current trigger condition
% launchApp - Launch Graphical User Interface (GUI) App for setting data types, triggers, and capture data interactively
% 
% datacapture properties:
% TimeOut - Time to wait before throwing exception, if trigger condition is not met
% TriggerPosition - The number of samples captured before trigger event
% JTAGCableName - Name of the JTAG cable used for data capture
%
% Created: 02-Mar-2020 21:45:58
% Generated by MATLAB 9.5 and HDL Verifier 5.5

classdef datacapture< hdlverifier.FPGADataReader

methods
    function obj = datacapture
        obj.TriggerPosition  =  0;
        obj.NumCaptureWindows  =  1;
        obj.TimeOut          = 10;
        obj.setDataType('Data_out',numerictype(0,5,0));
        obj.setDataType('Calibration','boolean');
        obj.setDataType('New_Frame','boolean');
    end
end

% !!! Do NOT change any of the constant properties below !!!
properties (Nontunable, Constant)
    % SamplesPerFrame Samples per frame
    SamplesPerFrame = 128
    BitWidth = [5  1  1]
    SignalNames = {'Data_out','Calibration','New_Frame'}
    IsSignalTrigger = [1  1  1]
    IsSignalData = [1  1  1]
    % FPGAVendor FPGA vendor
    FPGAVendor = 'Altera'
    % Version
    Version = '1.0'
    % Timestamp
    TimeStamp = '02-Mar-2020 21:45:58'
end

end
